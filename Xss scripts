import html

# Sample vulnerable web application code
class VulnerableWebApp:
    def __init__(self):
        self.users = {
            'alice': 'password123',
            'bob': 'securepassword'
        }
        self.logged_in_user = None

    def login(self, username, password):
        if username in self.users and self.users[username] == password:
            self.logged_in_user = username
            return f"Welcome, {username}!"
        else:
            return "Invalid credentials."

    def logout(self):
        self.logged_in_user = None
        return "Logged out."

    def get_user_profile(self):
        if self.logged_in_user:
            return f"User profile for {self.logged_in_user}."
        else:
            return "Please log in to view your profile."

# Simulated XSS attack
class XSSAttack:
    def __init__(self, web_app):
        self.web_app = web_app

    def exploit(self, payload):
        # The payload is a script that will be executed in the context of the web page
        # In a real attack, this could be malicious JavaScript code
        # Here we'll just print the payload for demonstration purposes
        print(f"Executing payload: {html.escape(payload)}")
        # In a real attack, the payload would be sent to the server and executed there

# Example of an XSS attack
if __name__ == '__main__':
    # Initialize the vulnerable web application
    web_app = VulnerableWebApp()

    # Attacker's payload
    payload = "<script>alert('XSS');</script>"

    # Simulate the attack
    attack = XSSAttack(web_app)
    attack.exploit(payload)
